	Flex -> Matched token: func
	Flex -> Matched token: summary
	Flex -> Matched token: (
	Flex -> Matched token: int
	Flex -> Matched token: varA
	Flex -> Matched token: ,
	Flex -> Matched token: int
	Flex -> Matched token: varB
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nSummary = %d"
	Line 1 at lexeme '"\nSummary = %d"' : syntax error
	Flex -> Matched token: ,
	Flex -> Matched token: varA
	Flex -> Matched token: +
	Flex -> Matched token: varB
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: 

	ERROR !
	Flex -> Matched token: }
	Line 2 at lexeme '}' : syntax error
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nSubstraction = %d"
	Flex -> Matched token: ,
	Flex -> Matched token: varA
	Flex -> Matched token: -
	Flex -> Matched token: varB
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: func
	Flex -> Matched token: substraction
	Flex -> Matched token: (
	Flex -> Matched token: int
	Flex -> Matched token: varA
	Flex -> Matched token: ,
	Flex -> Matched token: int
	Flex -> Matched token: varB
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nSubstraction = %d"
	Flex -> Matched token: ,
	Flex -> Matched token: varA
	Flex -> Matched token: -
	Flex -> Matched token: varB
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: 

	ERROR !
	Flex -> Matched token: }
	Line 3 at lexeme '}' : syntax error
	Flex -> Matched token: func
	Flex -> Matched token: multiply
	Flex -> Matched token: (
	Flex -> Matched token: int
	Flex -> Matched token: varA
	Flex -> Matched token: ,
	Flex -> Matched token: int
	Flex -> Matched token: varB
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nMultiply = %d"
	Flex -> Matched token: ,
	Flex -> Matched token: varA
	Flex -> Matched token: *
	Flex -> Matched token: varB
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: 

	ERROR !
	Flex -> Matched token: }
	Line 4 at lexeme '}' : syntax error
	Flex -> Matched token: func
	Flex -> Matched token: division
	Flex -> Matched token: (
	Flex -> Matched token: int
	Flex -> Matched token: varA
	Flex -> Matched token: ,
	Flex -> Matched token: int
	Flex -> Matched token: varB
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nDivision(x/y) = %d"
	Flex -> Matched token: ,
	Flex -> Matched token: varA
	Flex -> Matched token: /
	Flex -> Matched token: varB
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nDivision(y/x) = %d"
	Flex -> Matched token: ,
	Flex -> Matched token: varB
	Flex -> Matched token: /
	Flex -> Matched token: varA
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: 

	ERROR !
	Flex -> Matched token: }
	Line 5 at lexeme '}' : syntax error
	Flex -> Matched token: func
	Flex -> Matched token: concat
	Flex -> Matched token: (
	Flex -> Matched token: int
	Flex -> Matched token: A
	Flex -> Matched token: [
	Flex -> Matched token: ]
	Flex -> Matched token: ,
	Flex -> Matched token: int
	Flex -> Matched token: sizeA
	Flex -> Matched token: ,
	Flex -> Matched token: int
	Flex -> Matched token: B
	Flex -> Matched token: [
	Flex -> Matched token: ]
	Flex -> Matched token: ,
	Flex -> Matched token: int
	Flex -> Matched token: sizeB
	Flex -> Matched token: ,
	Flex -> Matched token: int
	Flex -> Matched token: C
	Flex -> Matched token: [
	Flex -> Matched token: ]
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: for
	Flex -> Matched token: (
	Flex -> Matched token: int
	Flex -> Matched token: i
	Flex -> Matched token: =
	Flex -> Matched token: 0
	Flex -> Matched token: ;
	Flex -> Matched token: i
	Flex -> Matched token: <
	Flex -> Matched token: sizeA
	Flex -> Matched token: ;
	Flex -> Matched token: i
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: C
	Flex -> Matched token: [
	Flex -> Matched token: i
	Flex -> Matched token: ]
	Flex -> Matched token: =
	Flex -> Matched token: A
	Flex -> Matched token: [
	Flex -> Matched token: i
	Flex -> Matched token: ]
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: for
	Flex -> Matched token: (
	Flex -> Matched token: int
	Flex -> Matched token: i
	Flex -> Matched token: =
	Flex -> Matched token: 0
	Flex -> Matched token: ;
	Flex -> Matched token: i
	Flex -> Matched token: <
	Flex -> Matched token: sizeB
	Flex -> Matched token: ;
	Flex -> Matched token: i
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: C
	Flex -> Matched token: [
	Flex -> Matched token: sizeA
	Flex -> Matched token: +
	Flex -> Matched token: i
	Flex -> Matched token: ]
	Flex -> Matched token: =
	Flex -> Matched token: B
	Flex -> Matched token: [
	Flex -> Matched token: i
	Flex -> Matched token: ]
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: 

	ERROR !
	Flex -> Matched token: }
	Line 6 at lexeme '}' : syntax error
	Flex -> Matched token: func
	Flex -> Matched token: main
	Flex -> Matched token: (
	Flex -> Matched token: int
	Flex -> Matched token: argc
	Flex -> Matched token: ,
	Flex -> Matched token: char
	Flex -> Matched token: *
	Flex -> Matched token: argv
	Flex -> Matched token: [
	Flex -> Matched token: ]
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: int
	Flex -> Matched token: x
	Flex -> Matched token: ;
	Flex -> Matched token: int
	Flex -> Matched token: y
	Flex -> Matched token: ;
	Flex -> Matched token: int
	Flex -> Matched token: z
	Flex -> Matched token: ,
	Flex -> Matched token: a
	Flex -> Matched token: ;
	Flex -> Matched token: int
	Flex -> Matched token: result_cmp
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "type x:"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%d"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: x
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "type y:"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%d"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: y
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: summary
	Flex -> Matched token: (
	Flex -> Matched token: x
	Flex -> Matched token: ,
	Flex -> Matched token: y
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: substraction
	Flex -> Matched token: (
	Flex -> Matched token: x
	Flex -> Matched token: ,
	Flex -> Matched token: y
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: multiply
	Flex -> Matched token: (
	Flex -> Matched token: x
	Flex -> Matched token: ,
	Flex -> Matched token: y
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: division
	Flex -> Matched token: (
	Flex -> Matched token: x
	Flex -> Matched token: ,
	Flex -> Matched token: y
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: char
	Flex -> Matched token: word1
	Flex -> Matched token: [
	Flex -> Matched token: 50
	Flex -> Matched token: ]
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "type a word now : "
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%s"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: word1
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nThe length of word is : %zu \n"
	Flex -> Matched token: ,
	Flex -> Matched token: strlen
	Flex -> Matched token: (
	Flex -> Matched token: word1
	Flex -> Matched token: )
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: char
	Flex -> Matched token: word2
	Flex -> Matched token: [
	Flex -> Matched token: 50
	Flex -> Matched token: ]
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\ntype another word : "
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%s"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: word2
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: result_cmp
	Flex -> Matched token: =
	Flex -> Matched token: strcmp
	Flex -> Matched token: (
	Flex -> Matched token: word1
	Flex -> Matched token: ,
	Flex -> Matched token: word2
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: if
	Flex -> Matched token: (
	Flex -> Matched token: result_cmp
	Flex -> Matched token: ==
	Flex -> Matched token: 0
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "The words are equal\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: if
	Flex -> Matched token: (
	Flex -> Matched token: result_cmp
	Flex -> Matched token: >
	Flex -> Matched token: 0
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "%s is greater than %s\n"
	Flex -> Matched token: ,
	Flex -> Matched token: word1
	Flex -> Matched token: ,
	Flex -> Matched token: word2
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "%s is less than %s\n"
	Flex -> Matched token: ,
	Flex -> Matched token: word1
	Flex -> Matched token: ,
	Flex -> Matched token: word2
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: int
	Flex -> Matched token: i
	Flex -> Matched token: =
	Flex -> Matched token: 0
	Flex -> Matched token: ;
	Flex -> Matched token: z
	Flex -> Matched token: =
	Flex -> Matched token: 2
	Flex -> Matched token: ;
	Flex -> Matched token: a
	Flex -> Matched token: =
	Flex -> Matched token: 1
	Flex -> Matched token: ;
	Flex -> Matched token: while
	Flex -> Matched token: (
	Flex -> Matched token: i
	Flex -> Matched token: <
	Flex -> Matched token: 3
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: z
	Flex -> Matched token: =
	Flex -> Matched token: (
	Flex -> Matched token: (
	Flex -> Matched token: 10
	Flex -> Matched token: -
	Flex -> Matched token: x
	Flex -> Matched token: )
	Flex -> Matched token: /
	Flex -> Matched token: y
	Flex -> Matched token: )
	Flex -> Matched token: *
	Flex -> Matched token: a
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nNumber Z : %d"
	Flex -> Matched token: ,
	Flex -> Matched token: z
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: a
	Flex -> Matched token: *
	Flex -> Matched token: =
	Flex -> Matched token: (
	Flex -> Matched token: -
	Flex -> Matched token: 1
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: i
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\n\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: int
	Flex -> Matched token: A
	Flex -> Matched token: [
	Flex -> Matched token: 2
	Flex -> Matched token: ]
	Flex -> Matched token: =
	Flex -> Matched token: {
	Flex -> Matched token: 17
	Flex -> Matched token: ,
	Flex -> Matched token: 22
	Flex -> Matched token: }
	Flex -> Matched token: ;
	Flex -> Matched token: int
	Flex -> Matched token: B
	Flex -> Matched token: [
	Flex -> Matched token: 4
	Flex -> Matched token: ]
	Flex -> Matched token: =
	Flex -> Matched token: {
	Flex -> Matched token: 31
	Flex -> Matched token: ,
	Flex -> Matched token: 56
	Flex -> Matched token: ,
	Flex -> Matched token: 87
	Flex -> Matched token: ,
	Flex -> Matched token: 102
	Flex -> Matched token: }
	Flex -> Matched token: ;
	Flex -> Matched token: int
	Flex -> Matched token: sizeA
	Flex -> Matched token: =
	Flex -> Matched token: (
	Flex -> Matched token: A
	Flex -> Matched token: )
	Flex -> Matched token: /
	Flex -> Matched token: (
	Flex -> Matched token: A
	Flex -> Matched token: [
	Flex -> Matched token: 0
	Flex -> Matched token: ]
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: int
	Flex -> Matched token: sizeB
	Flex -> Matched token: =
	Flex -> Matched token: (
	Flex -> Matched token: B
	Flex -> Matched token: )
	Flex -> Matched token: /
	Flex -> Matched token: (
	Flex -> Matched token: B
	Flex -> Matched token: [
	Flex -> Matched token: 0
	Flex -> Matched token: ]
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: int
	Flex -> Matched token: C
	Flex -> Matched token: [
	Flex -> Matched token: 6
	Flex -> Matched token: ]
	Flex -> Matched token: ;
	Flex -> Matched token: concat
	Flex -> Matched token: (
	Flex -> Matched token: A
	Flex -> Matched token: ,
	Flex -> Matched token: sizeA
	Flex -> Matched token: ,
	Flex -> Matched token: B
	Flex -> Matched token: ,
	Flex -> Matched token: sizeB
	Flex -> Matched token: ,
	Flex -> Matched token: C
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "The array C contains : \n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: for
	Flex -> Matched token: (
	Flex -> Matched token: i
	Flex -> Matched token: =
	Flex -> Matched token: 0
	Flex -> Matched token: ;
	Flex -> Matched token: i
	Flex -> Matched token: <
	Flex -> Matched token: 6
	Flex -> Matched token: ;
	Flex -> Matched token: i
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "%d  "
	Flex -> Matched token: ,
	Flex -> Matched token: C
	Flex -> Matched token: [
	Flex -> Matched token: i
	Flex -> Matched token: ]
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: if
	Flex -> Matched token: (
	Flex -> Matched token: x
	Flex -> Matched token: >
	Flex -> Matched token: y
	Flex -> Matched token: &&
	Flex -> Matched token: y
	Flex -> Matched token: >
	Flex -> Matched token: 2
	Flex -> Matched token: &&
	Flex -> Matched token: x
	Flex -> Matched token: >
	Flex -> Matched token: 4
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nX is bigger than Y, X>4 and Y>2!!!!!\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nX isn't bigger than Y or X>4 or Y>2!!!!!\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: int
	Flex -> Matched token: century
	Flex -> Matched token: ,
	Flex -> Matched token: day
	Flex -> Matched token: ,
	Flex -> Matched token: month
	Flex -> Matched token: ,
	Flex -> Matched token: year
	Flex -> Matched token: ;
	Flex -> Matched token: float
	Flex -> Matched token: temperature
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\ntype a century: "
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%d"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: century
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "type a day: "
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%d"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: day
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: while
	Flex -> Matched token: (
	Flex -> Matched token: day
	Flex -> Matched token: <
	Flex -> Matched token: 1
	Flex -> Matched token: ||
	Flex -> Matched token: day
	Flex -> Matched token: >
	Flex -> Matched token: 31
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "WRONG DAY! TRY AGAIN!\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%d"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: day
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "type a month: "
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%d"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: month
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: while
	Flex -> Matched token: (
	Flex -> Matched token: month
	Flex -> Matched token: <
	Flex -> Matched token: 1
	Flex -> Matched token: ||
	Flex -> Matched token: month
	Flex -> Matched token: >
	Flex -> Matched token: 12
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "WRONG MONTH! TRY AGAIN!\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%d"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: month
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "type a year: "
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%d"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: year
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: while
	Flex -> Matched token: (
	Flex -> Matched token: year
	Flex -> Matched token: <
	Flex -> Matched token: 1000
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "TOO OLD! TRY AGAIN!\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%d"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: year
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "type a temperature: "
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%f"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: temperature
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: while
	Flex -> Matched token: (
	Flex -> Matched token: temperature
	Flex -> Matched token: <
	Flex -> Matched token: -
	Flex -> Matched token: 10
	Flex -> Matched token: ||
	Flex -> Matched token: temperature
	Flex -> Matched token: >
	Flex -> Matched token: 45
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "WRITE A REALISTIC NUMBER!\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: scanf
	Flex -> Matched token: (
	Flex -> Matched token: "%f"
	Flex -> Matched token: ,
	Flex -> Matched token: &
	Flex -> Matched token: temperature
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: if
	Flex -> Matched token: (
	Flex -> Matched token: century
	Flex -> Matched token: >
	Flex -> Matched token: 20
	Flex -> Matched token: &&
	Flex -> Matched token: day
	Flex -> Matched token: <=
	Flex -> Matched token: 5
	Line 6 at lexeme '\' : Unrecognized character(s) encountered!
		1 character(s) ignored so far
	ERROR !
	Flex -> Matched token: &&
	Line 6 at lexeme '&&' : syntax error
	Flex -> Matched token: month
	Flex -> Matched token: >=
	Flex -> Matched token: 3
	Flex -> Matched token: &&
	Flex -> Matched token: year
	Flex -> Matched token: ==
	Flex -> Matched token: 2024
	Line 6 at lexeme '\' : Unrecognized character(s) encountered!
		2 character(s) ignored so far
	ERROR !
	Flex -> Matched token: &&
	Line 6 at lexeme '&&' : syntax error
	Flex -> Matched token: temperature
	Flex -> Matched token: >=
	Flex -> Matched token: 25
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "\nToday is %d/%d/%d \n\n"
	Flex -> Matched token: ,
	Flex -> Matched token: day
	Flex -> Matched token: ,
	Flex -> Matched token: month
	Flex -> Matched token: ,
	Flex -> Matched token: year
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: if
	Flex -> Matched token: (
	Flex -> Matched token: temperature
	Flex -> Matched token: >=
	Flex -> Matched token: 20
	Flex -> Matched token: )
	Flex -> Matched token: {
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "Weather temperature in Greece is HIGH!\n"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: }
	Flex -> Matched token: }
	Flex -> Matched token: printf
	Flex -> Matched token: (
	Flex -> Matched token: "------------------------------"
	Flex -> Matched token: )
	Flex -> Matched token: ;
	Flex -> Matched token: return
	Flex -> Matched token: 0
	Flex -> Matched token: ;
	Flex -> Matched token: 

	ERROR !
	Flex -> Matched token: }
	Line 7 at lexeme '}' : syntax error
		Bison -> PARSING FAILED (8 syntax error(s) found).

Correct Words: 375
Correct Expressions: 0
Wrong Words: 2
Wrong Expressions: 8
