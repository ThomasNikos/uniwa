#
# Εργαστήριο ΛΣ 1 / Ασκηση 2 - 2 / 2022-23
# Ονοματεπώνυμο: ΝΙΚΟΛΑΟΣ ΘΩΜΑΣ
# ΑΜ: 21390068
#
#
#Άσκηση 2.
#
#Σε μια εφαρμογή χρειάζεται να δημιουργούμε νέους καταλόγους τους οποίους θα βρίσκει και θα
#χρησιμοποιεί. Γράψτε ένα script με όνομα createpvs το οποίο θα καλείται με παραμέτρους
#ROOTFOLDER, no_of_DBFOLDERS, no_of_DATAFOLDERS, USERNAME π.χ.
#createpvs /etc/data 0 5 user555
#ο οποίο θα κάνει τα ακόλουθα:
#• Θα ελέγχει τον αριθμό των ορισμάτων ώστε να είναι 4
#• Θα ελέγχει αν υπάρχει ο ROOTFOLDER μέσα στον οποίο θα δημιουργηθούν οι νέοι
#κατάλογοι
#• Θα ελέγχει αν υπάρχει ο χρήστης USERNAME (μέσα στο αρχείο /etc/passwd)
#• Αν όλοι οι έλεγχοι είναι επιτυχείς,
#- Θα δημιουργεί τόσους υποφακέλους με όνομα dbfolderΝ μέσα στον ROOTFOLDER
#όσους υποδεικνύει το νούμερο no_of_DBFOLDERS και με τέτοιο τρόπο ώστε να μην
#κάνει “overwrite” υφιστάμενους φακέλους. Π.χ. αν ο τελευταίος φάκελος που είχε
#δημιουργηθεί από προηγούμενη εκτέλεση είναι ο dbfolder18 και θέλουμε 6 νέους, θα
#πρέπει να δημιουργήσει τους dbfolder19, dbfolder20,…,dbfolder24 (αν η παράμετρος
#είναι 0 δεν θα πρέπει να δημιουργήσει κανέναν).
#- To ίδιο θα πρέπει να ισχύει (δηλαδή να δημιουργούνται χωρίς “overwrite”) και για τους
#υποφακέλους datafolderN που καθορίζονται από το no_of_DATAFOLDERS.
#- Μετά την δημιουργία των φακέλων, θα χρησιμοποιεί την εντολή chown ώστε να δώσει
#την κυριότητα των νέων φακέλων στον χρήστη USERNAME
#
#
#Απάντηση:

#!/bin/bash

#Έλεγχος για το αν δώθηκαν 4 ορίσματα.

if [ $# -ne 4 ];then 
    echo "Createpvs needs 4 arguments to run, you gave $#." >&2
    exit 1
fi

#Έλεγχος για το αν υπάρχει ο  ROOTFOLDER.

test -d $1
tmp=$?
if [ $tmp -ne 0 ];then
    echo "$1 does not exist." >&2
    exit 2
fi

#Έλεγχος αν υπάρχει το username.

test ! -z "$(grep -w "^$4" /etc/passwd)" || echo "$4 is not a valid username." >&2 || exit 3

#Δημιουργία φακέλων.

no=$2
prevdir=$(ls $1 | grep "dbfolder" | sed "s/dbfolder//g" | sort -V | tail -1)
test -z $prevdir && prevdir=0
while ! [ $no = 0 ]; do
    prevdir=$(expr $prevdir + 1)
    mkdir "$1/dbfolder$prevdir"
    chown $4: "$1/dbfolder$prevdir"
    no=$(expr $no - 1)
done

no=$3
prevdir=0
prevdir=$(ls $1 | grep "datafolder" | sed "s/datafolder//g" | sort -V | tail -1)
test -z $prevdir && prevdir=0
while ! [ $no = 0 ]; do
    prevdir=$(expr $prevdir + 1)
    mkdir "$1/datafolder$prevdir"
    chown $4: "$1/datafolder$prevdir"
    no=$(expr $no - 1)
done