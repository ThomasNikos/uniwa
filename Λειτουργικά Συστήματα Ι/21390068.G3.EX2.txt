#
# Εργαστήριο ΛΣ 1 / Ασκηση 2 / 2022-23
# Ονοματεπώνυμο: ΝΙΚΟΛΑΟΣ ΘΩΜΑΣ
# ΑΜ: 21390068
#
#
#
#
#Άσκηση 1.
#
#Να γραφτεί script με το όνομα searching το οποίο (α) να δέχεται ως ορίσματα δύο ακεραίους
#αριθμούς και (β) να ζητάει από το χρήστη το όνομα ενός καταλόγου, και με βάση αυτά να
#εμφανίζει στην οθόνη τα ακόλουθα (τα 1-3 με χρήση της εντολής find και τα 4-5 με συνδυασμό
#των εντολών ls και grep):
#1. Τα αρχεία του δέντρου του δοθέντος καταλόγου με εξουσιοδοτήσεις (permissions) τον πρώτο
#αριθμό (όρισμα) θεωρώντας τον ως οκταδικό ισοδύναμο.
#2. Τα αρχεία του δέντρου του δοθέντος καταλόγου που άλλαξαν (modify) περιεχόμενα κατά τις
#‘x’ τελευταίες μέρες, όπου ‘x’ ο δεύτερος αριθμός (όρισμα).
#3. Τους υποκαταλόγους του δέντρου του δοθέντος καταλόγου που προσπελάστηκαν (access)
#κατά τις ‘x’ τελευταίες μέρες, όπου ‘x’ ο δεύτερος αριθμός (όρισμα).
#4. Τα αρχεία του δοθέντος καταλόγου στα οποία έχουν δικαίωμα ανάγνωσης όλοι οι χρήστες.
#5. Τους υποκαταλόγους του δοθέντος καταλόγου στους οποίους έχουν δικαίωμα αλλαγών
#(create/rename/delete files) εκτός από τον ιδιοκτήτη και άλλοι χρήστες του συστήματος.
#Πριν από τον εκτύπωση κάθε λίστας από τις παραπάνω (1 έως 5) να τυπώνεται κατάλληλη
#επικεφαλίδα η οποία να αναφέρει μεταξύ άλλων και τον αριθμό των αρχείων (ή υποκαταλόγων)
#που πρόκειται να τυπωθούν. Το script να εκτελείται επαναληπτικά όσο επιθυμεί ο χρήστης (για
#διαφορετικούς καταλόγους) και στο τέλος (πριν την τελική έξοδο) να εμφανίζει αθροιστικά το
#συνολικό αριθμό των ευρεθέντων (αρχείων / υποκαταλόγων) κάθε περίπτωσης (από τις 1 έως 6)
#για όλους τους καταλόγους στους οποίους έψαξε.
#
#
#Απάντηση:

#!/bin/bash

if [ $# -ne 2 ]; then
    echo "Not enough arguements." >&2
    exit 1
fi
re='^[0-9]+$'
if ! [[ $1 =~ $re ]]; then
    echo "Not an integer." >&2
    exit 2
fi
if ! [[ $2 =~ $re ]]; then
    echo "Not an integer." >&2
    exit 3
fi
name="test"
while [ $name != "exit" ]
do
echo "Give name of a directory: (Type exit if you want to leave)"
read name
    if [ $name == "exit" ]; then
        echo All Files Found:
        echo -e 1. $a"\n"2. $b"\n"3. $c"\n"4. $d"\n"5. $e
        exit 0
    fi
    if [ ! -d $name ]; then
        echo -e "Not a directory\n"
        echo All Files Found:
        echo -e 1. $a"\n"2. $b"\n"3. $c"\n"4. $d"\n"5. $e
        exit 4
    fi
    echo "Files with permissions $1: "
    find $name -perm $1
    a=$(($a+$(find $name -perm $1 | wc -l)))
    echo "Files modifidied in last $2 days: "
    find $name -mtime -$2
    b=$(($b+$(    find $name -mtime -$2 | wc -l)))
    echo "Directories accessed in last $2 days: "
    find $name -type d -atime -$2
    c=$(($c+$(find $name -type d -atime -$2 | wc -l)))
    echo "Files all users have permission to read: "
    ls -l $name | grep "^.r..r..r.."
    d=$(($d+$(ls -l $name | grep "^.r..r..r.." | wc -l)))
    echo "Directories everyone can make changes (create/rename/delete files): "
    ls -l $name | grep "^drwxrwxrwx"
    e=$(($e+$(ls -l $name | grep "^drwxrwxrwx" | wc -l)))
    echo ""
done
#
#
#
#Άσκηση 2
#
#Σε μια εφαρμογή χρειάζεται να δημιουργούμε νέους καταλόγους τους οποίους θα βρίσκει και θα
#χρησιμοποιεί. Γράψτε ένα script με όνομα createpvs το οποίο θα καλείται με παραμέτρους
#ROOTFOLDER, no_of_DBFOLDERS, no_of_DATAFOLDERS, USERNAME π.χ.
#createpvs /etc/data 0 5 user555
#ο οποίο θα κάνει τα ακόλουθα:
#• Θα ελέγχει τον αριθμό των ορισμάτων ώστε να είναι 4
#• Θα ελέγχει αν υπάρχει ο ROOTFOLDER μέσα στον οποίο θα δημιουργηθούν οι νέοι
#κατάλογοι
#• Θα ελέγχει αν υπάρχει ο χρήστης USERNAME (μέσα στο αρχείο /etc/passwd)
#• Αν όλοι οι έλεγχοι είναι επιτυχείς,
#- Θα δημιουργεί τόσους υποφακέλους με όνομα dbfolderΝ μέσα στον ROOTFOLDER
#όσους υποδεικνύει το νούμερο no_of_DBFOLDERS και με τέτοιο τρόπο ώστε να μην
#κάνει “overwrite” υφιστάμενους φακέλους. Π.χ. αν ο τελευταίος φάκελος που είχε
#δημιουργηθεί από προηγούμενη εκτέλεση είναι ο dbfolder18 και θέλουμε 6 νέους, θα
#πρέπει να δημιουργήσει τους dbfolder19, dbfolder20,…,dbfolder24 (αν η παράμετρος
#είναι 0 δεν θα πρέπει να δημιουργήσει κανέναν).
#- To ίδιο θα πρέπει να ισχύει (δηλαδή να δημιουργούνται χωρίς “overwrite”) και για τους
#υποφακέλους datafolderN που καθορίζονται από το no_of_DATAFOLDERS.
#- Μετά την δημιουργία των φακέλων, θα χρησιμοποιεί την εντολή chown ώστε να δώσει
#την κυριότητα των νέων φακέλων στον χρήστη USERNAME
#
#
#Απάντηση:

#!/bin/bash

#Έλεγχος για το αν δώθηκαν 4 ορίσματα.

if [ $# -ne 4 ];then 
    echo "Createpvs needs 4 arguments to run, you gave $#." >&2
    exit 1
fi

#Έλεγχος για το αν υπάρχει ο  ROOTFOLDER.

test -d $1
tmp=$?
if [ $tmp -ne 0 ];then
    echo "$1 does not exist." >&2
    exit 2
fi

#Έλεγχος αν υπάρχει το username.

test ! -z "$(grep -w "^$4" /etc/passwd)" || echo "$4 is not a valid username." >&2 || exit 3

#Δημιουργία φακέλων.

no=$2
prevdir=$(ls $1 | grep "dbfolder" | sed "s/dbfolder//g" | sort -V | tail -1)
test -z $prevdir && prevdir=0
while ! [ $no = 0 ]; do
    prevdir=$(expr $prevdir + 1)
    mkdir "$1/dbfolder$prevdir"
    chown $4: "$1/dbfolder$prevdir"
    no=$(expr $no - 1)
done

no=$3
prevdir=0
prevdir=$(ls $1 | grep "datafolder" | sed "s/datafolder//g" | sort -V | tail -1)
test -z $prevdir && prevdir=0
while ! [ $no = 0 ]; do
    prevdir=$(expr $prevdir + 1)
    mkdir "$1/datafolder$prevdir"
    chown $4: "$1/datafolder$prevdir"
    no=$(expr $no - 1)
done
#
#
#
#Άσκηση 5
#
#Μέσω του vi δημιουργήστε ένα αρχείο με το όνομα grades που να περιλαμβάνει περίπου 15
#εγγραφές της παρακάτω μορφής: (οι στήλες κατά σειρά αντιστοιχούν σε Όνομα, Επώνυμο,
#Κατεύθυνση, Βαθμός_1, Βαθμός_2, Βαθμός_3, Βαθμός_4, με την κατεύθυνση να παίρνει τιμές
#Texn, Thet, Theo και τους βαθμούς να κυμαίνονται μεταξύ 0 και 100).
#Thomas Georgiou Texn 96 89 81 84
#Mary Makridi Thet 67 75 56 74
#Nick Aliferis Theo 81 87 75 94
#(α) Να δοθούν οι awk εντολές που επιστρέφουν για το αρχείο grades:
#1. Ποια άτομα έχουν όνομα που αρχίζει από K ή N (να τυπώνονται όλα τα στοιχεία)
#2. Ποιοι μαθητές είναι της θεωρητικής κατεύθυνσης (να τυπώνεται επώνυμο και μετά όνομα)
#3. Ποιος είναι ο μεγαλύτερος βαθμός στο δεύτερο μάθημα
#4. Πόσα άτομα έχουν τον τρίτο βαθμό μικρότερο του 70
#(β) Γράψτε awk script το οποίο αφού εφαρμοστεί στο αρχείο grades να παράγει το αρχείο
#students το οποίο θα περιέχει καταχωρήσεις της μορφής:
#Student 1, Thomas Georgiou, ……..
#Student 2, Mary Makridi, ……..
#Student 3, Nick Aliferis, ……..
#Όπου στη θέση των τελειών θα τοποθετείται ο μέσος όρος ανά φοιτητή. Δώστε επίσης την εντολή
#η οποία θα ταξινομεί το students κατά μέσο όρο.
#(γ) Γράψτε awk script το οποίο αφού εφαρμοστεί στο αρχείο grades να τυπώνει το μέσο όρο ανά
#μάθημα για κάθε ένα από τα τέσσερα μαθήματα.
#
#
#Απάντηση:

vi grades.txt

Thomas Georgiou Texn 96 89 81 84
Mary Makridi Thet 67 75 56 74
Nick Aliferis Theo 81 87 75 94
Kostas Kotos Texn 80 50 75 90
Gogo Papa Theo 79 49 76 89
Pepa Poter Thet 90 89 76 30
Papa Gogo Thet 87 67 95 54
Kotos Kostas Theo 78 67 90 35
John Hey Texn 45 47 90 89
Kater Lope Thet 78 96 54 67
Steve Kole Theo 54 98 96 25
Java Cpp Texn 24 67 86 56
Siri Apple Theo 36 38 76 85
Xrist Foto Thet 45 49 87 94
Fofo Greg Texn 87 89 90 97

#Πατάμε ESC για command mode. Για save και έξοδο ":wq".

(α)
1. awk /^[KN]/ grades.txt
2. awk '$3=="Theo" {print $2, $1}' grades.txt
3.
4. awk '$6<70' grades.txt | wc -l
(β)
#!/usr/bin/awk -f

{print "Student "NR", "$1", "$2", "($3+$4+$5+$6)/4 >> "students.txt"}
----
sort -k 5n studnets.txt
(γ)
#!/usr/bin/awk -f

{sum0 += $4
sum1 += $5
sum2 += $6
sum3 += $7}
END{print "1. " (sum0/NR)
print "2. " (sum1/NR)
print "3. " (sum2/NR)
print "4. " (sum3/NR)
}
